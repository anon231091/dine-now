# Production Docker Compose Override
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Production Database Configuration
  database:
    environment:
      POSTGRES_DB: ${DB_NAME:-restaurant_app}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    command: |
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    restart: always

  # Production Backend Configuration
  backend:
    build:
      target: production
    environment:
      NODE_ENV: production
      
      # Database
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-restaurant_app}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSL: true
      DB_MAX_CONNECTIONS: 50
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      
      # CORS - Update for production domains
      CORS_ORIGIN: ${CORS_ORIGIN:-https://yourdomain.com,https://t.me}
      
      # Telegram
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
      
      # Features - Disable in production
      ENABLE_SWAGGER: false
      ENABLE_METRICS: true
      LOG_LEVEL: info
      
      # File Upload
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 5242880
      
      # Rate Limiting - Stricter in production
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX: 100
    volumes:
      - uploads_data:/app/uploads
      # Remove source code mounts
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Production Web App Configuration
  webapp:
    build:
      target: production
    environment:
      NODE_ENV: production
      
      # API Configuration - Update for production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.yourdomain.com}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-wss://api.yourdomain.com}
      
      # App Configuration
      NEXT_PUBLIC_APP_NAME: "DineNow - Restaurant Ordering"
      
      # Telegram
      NEXT_PUBLIC_BOT_USERNAME: ${NEXT_PUBLIC_BOT_USERNAME}
      
      # Performance
      NEXT_TELEMETRY_DISABLED: 1
    volumes:
      # Remove source code mounts
      - /dev/null:/app/apps/webapp/src
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Production Redis Configuration
  redis:
    command: |
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_prod_data:/data
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Remove Adminer in production
  adminer:
    profiles:
      - debug

  # Add Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: dine-now-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
    depends_on:
      - backend
      - webapp
    networks:
      - dine-now-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Add monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: dine-now-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - dine-now-network
    profiles:
      - monitoring

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  uploads_data:
    driver: local
  prometheus_data:
    driver: local

# Production-specific networks with custom configuration
networks:
  dine-now-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
